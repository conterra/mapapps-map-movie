/* Button | DropDownButton | ComboButton | ToggleButton
 * 
 * Styling Buttons mainly includes:
 * 
 * 1. Containers
 * 		.dijitButton
 * 		.dijitDropDownButton
 * 		.dijitComboButton
 * 		.dijitButtonNode - common button/arrow wrapper shared across all three button types 
 *
 * 2. Button text
 * 		.dijitButtonText
 * 
 * 3. Arrows - only for DropDownButton and ComboButton
 * 	     There are total four diredtions arrows - down, left, right, up:
 * 		.dijitArrowButtonInner - down arrow by default
 *      .dijitLeftArrowButton .dijitArrowButtonInner - left arrow
 *      .dijitRightArrowButton .dijitArrowButtonInner - right arrow
 *      .dijitUpArrowButton .dijitArrowButtonInner - up arrow
 * 
 * 4. States - Hover, Active, Disabled, e.g.
 * 		.dijitButtonHover .dijitButtonNode
 * 		.dijitButtonActive .dijitButtonNode
 * 		.dijitButtonDisabled .dijitButtonNode
 *      
 *      .dijitDisabled .dijitArrowButtonInner  - disabled arrow states 
*/

@import "../../themeSettings.less";

.@{themeName} {

    .dijitDropDownButton .dijitDownArrowButton .dijitArrowButtonInner {
        width: 12px;
        .bgHD('../../images/spriteGraphics.png');
        background-repeat: no-repeat;
        background-position: -150px -150px;
        position: relative;
    }
    .dijitDownArrowButtonHover .dijitArrowButtonInner,
    .dijitDropDownButton.dijitHover .dijitDownArrowButton .dijitArrowButtonInner {
        background-position: -150px -195px
    }
    .ctWindowToolbar .dijitButtonNode {
        .resetBG();
    }

    //.dijitButtonNode,   should be:  .dijitButton .dijitButtonNode


    .dijitButtonNode {
        font-weight: bold;
        .standard-gradient-and-filter(@button-background-color);
        color: @ct-button-text-color;
    }
    .ctDropDownColorSelector,
    .numberspinner,
    .dijitSpinner {
        .dijitButtonNode{
            .standard-gradient-and-filter(@minor-selected-color);
        }
    }
    .dijitToggleButtonChecked .dijitButtonNode{
        .standard-gradient-and-filter(@button-pressed-background-color);
    }
    .dijitButtonHover .dijitButtonNode,
    .dijitToggleButtonHover .dijitButtonNode,
    .dijitDropDownButtonHover .dijitButtonNode,
    .dijitComboButtonHover .dijitButtonNodeHover,
    .dijitComboButtonHover .dijitDownArrowButtonHover,
    .ctSecondaryButton .dijitButtonHover .dijitButtonNode,
    //TODO: ctSecondaryButtonNode below should be removed with 4.0 release
    .ctSecondaryButtonNode .dijitButtonHover .dijitButtonNode{
        .standard-gradient-and-filter(@button-hovered-background-color);
        color: @ct-button-hovered-text-color;
    }
    .ctSecondaryButton .dijitButtonNode,
    //TODO: ctSecondaryButtonNode below should be removed with 4.0 release
    .ctSecondaryButtonNode .dijitButtonNode {
        //check if @container-background-color is a dark or a bright one
        @luma: luma(@container-background-color);
        .darkOrBright() when (@luma >= 50){
            .standard-gradient-and-filter(lighten(desaturate(@ct-highlight-color,100%), 25%));
        }
        .darkOrBright() when (@luma < 50){
            .standard-gradient-and-filter(darken(desaturate(@ct-highlight-color,100%), 35%));
        }
        .darkOrBright();
    }
    //primary Button
    .ctPrimaryInput {
        .dijitButtonNode{
            .standard-gradient-and-filter(@ct-primary-button-color);
            color: @ct-primary-button-text-color;
        }
        &.dijitHover,
        .dijitHover{ 
            .dijitButtonNode{
                .standard-gradient-and-filter(@ct-primary-button-hovered-color);
                color: @ct-primary-button-hovered-text-color;
            }             
        }
    }



    .dijitButton .dijitButtonNode,
    .dijitDropDownButton .dijitButtonNode,
    .dijitComboButton .dijitButtonNode,
    .dijitToggleButton .dijitButtonNode{
        border-width: 0;
        padding: @ct-button-padding;
    }

    .setBorderRadius() when (@button-border-radius >0){
        //the following is only needed if button-border-radius is set to something greater then 0

        .dijitButton .dijitButtonNode, 
        .dijitDropDownButton .dijitButtonNode, 
        .dijitToggleButton .dijitButtonNode{
            .border-radius(@button-border-radius);
        }

        .dijitComboButton .dijitButtonNode {
            .border-radius(@button-border-radius 0 0 @button-border-radius);
        }

        .dijitComboButton .dijitButtonNode.dijitDownArrowButton {
            .border-radius(0 @button-border-radius @button-border-radius 0);
        }
    }
    .setBorderRadius();

    /* TODO: still needed? */
    .dijitComboButton .dijitArrowButton {
        border-left-width: 0px;
        padding: 4px 2px 4px 2px;
    }

    /*arrow styles for down/up/left/right directions*/
    .dijitButtonNode {
        .dijitArrowButtonInner {
            .size(15px);
            margin: 0 auto;
            .bgHD('../../images/spriteGraphics.png');
            //background-image:url("images/buttonArrows.png");
            background-repeat: no-repeat;
            background-position: -150px -149px;
        }
        &.dijitDownArrowButtonHover .dijitArrowButtonInner {
            background-position: -150px -194px;
        }
        .dijitLeftArrowButton .dijitArrowButtonInner {
            background-position: -60px -149px;
        }
        .dijitRightArrowButton .dijitArrowButtonInner {
            background-position: -105px -149px;
        }
        .dijitUpArrowButton .dijitArrowButtonInner {
            background-position: -195px -149px;
        }
        .dijitDisabled .dijitArrowButtonInner {
            background-position: -150px -238px;
        }
        .dijitDisabled .dijitLeftArrowButton .dijitArrowButtonInner {
            background-position: -60px -238px;
        }
        .dijitDisabled .dijitRightArrowButton .dijitArrowButtonInner {
            background-position: -105px -238px;
        }
        .dijitDisabled .dijitUpArrowButton .dijitArrowButtonInner {
            background-position: -195px -238px;
        }
    }

    .dijitButtonText {
        padding: 0 0.3em;
        text-align: center;
    }

    /* disabled status */
    .dijitButtonDisabled .dijitButtonNode,
    .dijitDropDownButtonDisabled .dijitButtonNode,
    .dijitComboButtonDisabled .dijitButtonNode,
    .dijitToggleButtonDisabled .dijitButtonNode {
        background-image: none;
        outline: none;
        .standard-gradient-and-filter(@disabled-background-color);
        color: @ct-button-disabled-text-color;
    }

    .dijitComboButtonDisabled .dijitArrowButton {
        border-left-width: 0px;
    }
    /* for ComboButton */
    table.dijitComboButton {
        border-collapse: separate; /* override dijit.css so that ComboBox rounded corners work */
    }

    .dijitToggleButton.ctHighlightedDockingButton .dijitButtonNode {
        background-image: none;
    }
}